/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.spr.query.common.presentation.openapi.generated.controller;

import com.spr.query.common.presentation.openapi.generated.model.BadRequestResponse;
import com.spr.query.common.presentation.openapi.generated.model.GetCommonTasks;
import com.spr.query.common.presentation.openapi.generated.model.InternalServerErrorResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "common/tasks", description = "the common/tasks API")
@RequestMapping("${openapi.aNVTask.base-path:/v1/anv}")
public interface CommonApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /common/tasks : タスク一覧を取得するAPI 
     *
     * @return 200 (OK) (status code 200)
     *         or 400 (Bad Request) (status code 400)
     *         or 500 (Internal Server Error) (status code 500)
     */
    @Operation(
        operationId = "getTasks",
        summary = "タスク一覧を取得するAPI ",
        tags = { "common/tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "200 (OK)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetCommonTasks.class))
            }),
            @ApiResponse(responseCode = "400", description = "400 (Bad Request)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "500 (Internal Server Error)", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = InternalServerErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/common/tasks",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetCommonTasks> getTasks(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"tasks\" : [ { \"taskName\" : \"オードリーはお笑い芸人です！\", \"id\" : 1 }, { \"taskName\" : \"オードリーはお笑い芸人です！\", \"id\" : 1 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : { \"detail\" : [ { \"field\" : \"user_id\", \"invalid_type\" : \"必須項目が空\" }, { \"field\" : \"user_id\", \"invalid_type\" : \"必須項目が空\" } ], \"type\" : \"invalid_parameter\", \"message\" : \"不正なパラメータでリクエストされました。\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"error\" : { \"type\" : \"internal_server_error\", \"message\" : \"予期しないエラーが発生しました。\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
